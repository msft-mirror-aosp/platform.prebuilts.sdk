// Signature format: 2.0
package android.nfc {

  public final class NfcAdapter {
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean addNfcUnlockHandler(android.nfc.NfcAdapter.NfcUnlockHandler, String[]);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean disable(boolean);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean enableReaderOption(boolean);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean enableSecureNfc(boolean);
    method public int getAdapterState();
    method @NonNull public android.nfc.NfcOemExtension getNfcOemExtension();
    method @NonNull @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public java.util.Map<java.lang.String,java.lang.Boolean> getTagIntentAppPreferenceForUser(int);
    method @RequiresPermission(android.Manifest.permission.NFC_SET_CONTROLLER_ALWAYS_ON) public boolean isControllerAlwaysOn();
    method @RequiresPermission(android.Manifest.permission.NFC_SET_CONTROLLER_ALWAYS_ON) public boolean isControllerAlwaysOnSupported();
    method @RequiresPermission(android.Manifest.permission.NFC_SET_CONTROLLER_ALWAYS_ON) public void registerControllerAlwaysOnListener(@NonNull java.util.concurrent.Executor, @NonNull android.nfc.NfcAdapter.ControllerAlwaysOnListener);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void registerNfcVendorNciCallback(@NonNull java.util.concurrent.Executor, @NonNull android.nfc.NfcAdapter.NfcVendorNciCallback);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean removeNfcUnlockHandler(android.nfc.NfcAdapter.NfcUnlockHandler);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int sendVendorNciMessage(int, @IntRange(from=0, to=15) int, @IntRange(from=0) int, @NonNull byte[]);
    method @RequiresPermission(android.Manifest.permission.NFC_SET_CONTROLLER_ALWAYS_ON) public boolean setControllerAlwaysOn(boolean);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void setReaderModePollingEnabled(boolean);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int setTagIntentAppPreferenceForUser(int, @NonNull String, boolean);
    method @RequiresPermission(android.Manifest.permission.NFC_SET_CONTROLLER_ALWAYS_ON) public void unregisterControllerAlwaysOnListener(@NonNull android.nfc.NfcAdapter.ControllerAlwaysOnListener);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void unregisterNfcVendorNciCallback(@NonNull android.nfc.NfcAdapter.NfcVendorNciCallback);
    field public static final String ACTION_REQUIRE_UNLOCK_FOR_NFC = "android.nfc.action.REQUIRE_UNLOCK_FOR_NFC";
    field @RequiresPermission(android.Manifest.permission.SHOW_CUSTOMIZED_RESOLVER) public static final String ACTION_SHOW_NFC_RESOLVER = "android.nfc.action.SHOW_NFC_RESOLVER";
    field public static final String EXTRA_RESOLVE_INFOS = "android.nfc.extra.RESOLVE_INFOS";
    field @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public static final int FLAG_SET_DEFAULT_TECH = 1073741824; // 0x40000000
    field public static final int MESSAGE_TYPE_COMMAND = 1; // 0x1
    field public static final int SEND_VENDOR_NCI_STATUS_FAILED = 3; // 0x3
    field public static final int SEND_VENDOR_NCI_STATUS_MESSAGE_CORRUPTED = 2; // 0x2
    field public static final int SEND_VENDOR_NCI_STATUS_REJECTED = 1; // 0x1
    field public static final int SEND_VENDOR_NCI_STATUS_SUCCESS = 0; // 0x0
    field public static final int TAG_INTENT_APP_PREF_RESULT_PACKAGE_NOT_FOUND = -1; // 0xffffffff
    field public static final int TAG_INTENT_APP_PREF_RESULT_SUCCESS = 0; // 0x0
    field public static final int TAG_INTENT_APP_PREF_RESULT_UNAVAILABLE = -2; // 0xfffffffe
  }

  public static interface NfcAdapter.ControllerAlwaysOnListener {
    method public void onControllerAlwaysOnChanged(boolean);
  }

  public static interface NfcAdapter.NfcUnlockHandler {
    method public boolean onUnlockAttempted(android.nfc.Tag);
  }

  public static interface NfcAdapter.NfcVendorNciCallback {
    method public void onVendorNciNotification(@IntRange(from=9, to=15) int, int, @NonNull byte[]);
    method public void onVendorNciResponse(@IntRange(from=0, to=15) int, int, @NonNull byte[]);
  }

  public final class NfcOemExtension {
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void clearPreference();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int forceRoutingTableCommit();
    method @NonNull public java.util.Map<java.lang.String,java.lang.Integer> getActiveNfceeList();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public long getMaxPausePollingTimeoutMills();
    method @NonNull @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public android.nfc.RoutingStatus getRoutingStatus();
    method @NonNull @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public java.util.List<android.nfc.NfcRoutingTableEntry> getRoutingTable();
    method @NonNull public android.nfc.T4tNdefNfcee getT4tNdefNfcee();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean hasUserEnabledNfc();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean isAutoChangeEnabled();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean isTagPresent();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void maybeTriggerFirmwareUpdate();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void overwriteRoutingTable(int, int, int, int);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int pausePolling(long);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void registerCallback(@NonNull java.util.concurrent.Executor, @NonNull android.nfc.NfcOemExtension.Callback);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int resumePolling();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void setAutoChangeEnabled(boolean);
    method @RequiresPermission(android.Manifest.permission.NFC_SET_CONTROLLER_ALWAYS_ON) public void setControllerAlwaysOnMode(int);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void synchronizeScreenState();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void triggerInitialization();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void unregisterCallback(@NonNull android.nfc.NfcOemExtension.Callback);
    field public static final int COMMIT_ROUTING_STATUS_FAILED = 3; // 0x3
    field public static final int COMMIT_ROUTING_STATUS_FAILED_UPDATE_IN_PROGRESS = 6; // 0x6
    field public static final int COMMIT_ROUTING_STATUS_OK = 0; // 0x0
    field public static final int DISABLE = 0; // 0x0
    field public static final int ENABLE_DEFAULT = 1; // 0x1
    field public static final int ENABLE_EE = 3; // 0x3
    field public static final int ENABLE_TRANSPARENT = 2; // 0x2
    field public static final int HCE_ACTIVATE = 1; // 0x1
    field public static final int HCE_DATA_TRANSFERRED = 2; // 0x2
    field public static final int HCE_DEACTIVATE = 3; // 0x3
    field public static final int NFCEE_TECH_A = 1; // 0x1
    field public static final int NFCEE_TECH_B = 2; // 0x2
    field public static final int NFCEE_TECH_F = 4; // 0x4
    field public static final int NFCEE_TECH_NONE = 0; // 0x0
    field public static final int POLLING_STATE_CHANGE_ALREADY_IN_REQUESTED_STATE = 2; // 0x2
    field public static final int POLLING_STATE_CHANGE_SUCCEEDED = 1; // 0x1
    field public static final int STATUS_OK = 0; // 0x0
    field public static final int STATUS_UNKNOWN_ERROR = 1; // 0x1
  }

  public static interface NfcOemExtension.Callback {
    method public void onApplyRouting(@NonNull java.util.function.Consumer<java.lang.Boolean>);
    method public void onBootFinished(int);
    method public void onBootStarted();
    method public void onCardEmulationActivated(boolean);
    method public void onDisableFinished(int);
    method public void onDisableRequested(@NonNull java.util.function.Consumer<java.lang.Boolean>);
    method public void onDisableStarted();
    method public void onEeListenActivated(boolean);
    method public void onEeUpdated();
    method public void onEnableFinished(int);
    method public void onEnableRequested(@NonNull java.util.function.Consumer<java.lang.Boolean>);
    method public void onEnableStarted();
    method public void onExtractOemPackages(@NonNull android.nfc.NdefMessage, @NonNull java.util.function.Consumer<java.util.List<java.lang.String>>);
    method public void onGetOemAppSearchIntent(@NonNull java.util.List<java.lang.String>, @NonNull java.util.function.Consumer<android.content.Intent>);
    method public void onHceEventReceived(int);
    method public void onLaunchHceAppChooserActivity(@NonNull String, @NonNull java.util.List<android.nfc.cardemulation.ApduServiceInfo>, @NonNull android.content.ComponentName, @NonNull String);
    method public void onLaunchHceTapAgainDialog(@NonNull android.nfc.cardemulation.ApduServiceInfo, @NonNull String);
    method public void onLogEventNotified(@NonNull android.nfc.OemLogItems);
    method public void onNdefMessage(@NonNull android.nfc.Tag, @NonNull android.nfc.NdefMessage, @NonNull java.util.function.Consumer<java.lang.Boolean>);
    method public void onNdefRead(@NonNull java.util.function.Consumer<java.lang.Boolean>);
    method public void onReaderOptionChanged(boolean);
    method public void onRfDiscoveryStarted(boolean);
    method public void onRfFieldDetected(boolean);
    method public void onRoutingChanged(@NonNull java.util.function.Consumer<java.lang.Boolean>);
    method public void onRoutingTableFull();
    method public void onStateUpdated(int);
    method public void onTagConnected(boolean);
    method public void onTagDispatch(@NonNull java.util.function.Consumer<java.lang.Boolean>);
  }

  public abstract class NfcRoutingTableEntry {
    method public int getNfceeId();
    method public int getRouteType();
    method public int getType();
    field public static final int TYPE_AID = 0; // 0x0
    field public static final int TYPE_PROTOCOL = 1; // 0x1
    field public static final int TYPE_SYSTEM_CODE = 3; // 0x3
    field public static final int TYPE_TECHNOLOGY = 2; // 0x2
  }

  public final class OemLogItems implements android.os.Parcelable {
    method public int describeContents();
    method public int getAction();
    method public int getCallingPid();
    method @Nullable public byte[] getCommandApdu();
    method public int getEvent();
    method @Nullable public byte[] getResponseApdu();
    method @Nullable public java.time.Instant getRfFieldEventTimeMillis();
    method @Nullable public android.nfc.Tag getTag();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nfc.OemLogItems> CREATOR;
    field public static final int EVENT_DISABLE = 2; // 0x2
    field public static final int EVENT_ENABLE = 1; // 0x1
    field public static final int EVENT_UNSET = 0; // 0x0
    field public static final int LOG_ACTION_HCE_DATA = 516; // 0x204
    field public static final int LOG_ACTION_NFC_TOGGLE = 513; // 0x201
    field public static final int LOG_ACTION_RF_FIELD_STATE_CHANGED = 1; // 0x1
    field public static final int LOG_ACTION_SCREEN_STATE_CHANGED = 518; // 0x206
    field public static final int LOG_ACTION_TAG_DETECTED = 3; // 0x3
  }

  public class RoutingStatus {
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int getDefaultIsoDepRoute();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int getDefaultOffHostRoute();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int getDefaultRoute();
  }

  public class RoutingTableAidEntry extends android.nfc.NfcRoutingTableEntry {
    method @NonNull public String getAid();
  }

  public class RoutingTableProtocolEntry extends android.nfc.NfcRoutingTableEntry {
    method public int getProtocol();
    field public static final int PROTOCOL_ISO_DEP = 4; // 0x4
    field public static final int PROTOCOL_NDEF = 7; // 0x7
    field public static final int PROTOCOL_NFC_DEP = 5; // 0x5
    field public static final int PROTOCOL_T1T = 1; // 0x1
    field public static final int PROTOCOL_T2T = 2; // 0x2
    field public static final int PROTOCOL_T3T = 3; // 0x3
    field public static final int PROTOCOL_T5T = 6; // 0x6
    field public static final int PROTOCOL_UNDETERMINED = 0; // 0x0
    field public static final int PROTOCOL_UNSUPPORTED = -1; // 0xffffffff
  }

  public class RoutingTableSystemCodeEntry extends android.nfc.NfcRoutingTableEntry {
    method @NonNull public byte[] getSystemCode();
  }

  public class RoutingTableTechnologyEntry extends android.nfc.NfcRoutingTableEntry {
    method public int getTechnology();
    field public static final int TECHNOLOGY_A = 0; // 0x0
    field public static final int TECHNOLOGY_B = 1; // 0x1
    field public static final int TECHNOLOGY_F = 2; // 0x2
    field public static final int TECHNOLOGY_UNSUPPORTED = -1; // 0xffffffff
    field public static final int TECHNOLOGY_V = 3; // 0x3
  }

  public final class T4tNdefNfcee {
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) @WorkerThread public int clearData();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean isOperationOngoing();
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public boolean isSupported();
    method @Nullable @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) @WorkerThread public android.nfc.T4tNdefNfceeCcFileInfo readCcfile();
    method @NonNull @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) @WorkerThread public byte[] readData(@IntRange(from=0, to=65535) int);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) @WorkerThread public int writeData(@IntRange(from=0, to=65535) int, @NonNull byte[]);
    field public static final int CLEAR_DATA_FAILED_DEVICE_BUSY = -1; // 0xffffffff
    field public static final int CLEAR_DATA_FAILED_INTERNAL = 0; // 0x0
    field public static final int CLEAR_DATA_SUCCESS = 1; // 0x1
    field public static final int WRITE_DATA_ERROR_CONNECTION_FAILED = -6; // 0xfffffffa
    field public static final int WRITE_DATA_ERROR_DEVICE_BUSY = -9; // 0xfffffff7
    field public static final int WRITE_DATA_ERROR_EMPTY_PAYLOAD = -7; // 0xfffffff9
    field public static final int WRITE_DATA_ERROR_INTERNAL = -1; // 0xffffffff
    field public static final int WRITE_DATA_ERROR_INVALID_FILE_ID = -4; // 0xfffffffc
    field public static final int WRITE_DATA_ERROR_INVALID_LENGTH = -5; // 0xfffffffb
    field public static final int WRITE_DATA_ERROR_NDEF_VALIDATION_FAILED = -8; // 0xfffffff8
    field public static final int WRITE_DATA_ERROR_NFC_NOT_ON = -3; // 0xfffffffd
    field public static final int WRITE_DATA_ERROR_RF_ACTIVATED = -2; // 0xfffffffe
    field public static final int WRITE_DATA_SUCCESS = 0; // 0x0
  }

  public final class T4tNdefNfceeCcFileInfo implements android.os.Parcelable {
    method public int describeContents();
    method @IntRange(from=15, to=32767) public int getCcFileLength();
    method @IntRange(from=0xffffffff, to=65535) public int getFileId();
    method @IntRange(from=5, to=32767) public int getMaxSize();
    method public int getVersion();
    method public boolean isReadAllowed();
    method public boolean isWriteAllowed();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.nfc.T4tNdefNfceeCcFileInfo> CREATOR;
    field public static final int VERSION_2_0 = 32; // 0x20
    field public static final int VERSION_3_0 = 48; // 0x30
  }

}

package android.nfc.cardemulation {

  public final class CardEmulation {
    method @Nullable @RequiresPermission(android.Manifest.permission.NFC_PREFERRED_PAYMENT_INFO) public static android.content.ComponentName getPreferredPaymentService(@NonNull android.content.Context);
    method @NonNull public java.util.List<android.nfc.cardemulation.ApduServiceInfo> getServices(@NonNull String, int);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void overrideRoutingTable(@NonNull android.app.Activity, int, int);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public void recoverRoutingTable(@NonNull android.app.Activity);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int setDefaultNfcSubscriptionId(int);
    method @RequiresPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) public int setServiceEnabledForCategoryOther(@NonNull android.content.ComponentName, boolean);
    field public static final int SET_SERVICE_ENABLED_STATUS_FAILURE_ALREADY_SET = 3; // 0x3
    field public static final int SET_SERVICE_ENABLED_STATUS_FAILURE_FEATURE_UNSUPPORTED = 1; // 0x1
    field public static final int SET_SERVICE_ENABLED_STATUS_FAILURE_INVALID_SERVICE = 2; // 0x2
    field public static final int SET_SERVICE_ENABLED_STATUS_FAILURE_UNKNOWN_ERROR = 4; // 0x4
    field public static final int SET_SERVICE_ENABLED_STATUS_OK = 0; // 0x0
    field public static final int SET_SUBSCRIPTION_ID_STATUS_FAILED_INTERNAL_ERROR = 2; // 0x2
    field public static final int SET_SUBSCRIPTION_ID_STATUS_FAILED_INVALID_SUBSCRIPTION_ID = 1; // 0x1
    field public static final int SET_SUBSCRIPTION_ID_STATUS_FAILED_NOT_SUPPORTED = 3; // 0x3
    field public static final int SET_SUBSCRIPTION_ID_STATUS_SUCCESS = 0; // 0x0
    field public static final int SET_SUBSCRIPTION_ID_STATUS_UNKNOWN = -1; // 0xffffffff
  }

}

